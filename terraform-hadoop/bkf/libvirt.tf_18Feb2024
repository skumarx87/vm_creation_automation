
resource "libvirt_volume" "centos7" {
  name = "centos-stable"
  #source = "http://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud.qcow2"
  source = "./CentOS-7-x86_64-GenericCloud.qcow2"
}
/*

data "template_file" "master_user_data" {
  template = file("${path.module}/config/master_cloud_init.cfg")
}

data "template_file" "worker_user_data" {
  template = file("${path.module}/config/worker_cloud_init.cfg")
  vars = {
	hostname = "${local.env}-worker.example.com"
	}
}
*/


resource "libvirt_volume" "kworkercentos" {
  name = "${local.env}-kworkercentos${count.index}"
  base_volume_id = "${libvirt_volume.centos7.id}"
  count = "${local.kworker_count}"
}

resource "libvirt_cloudinit_disk" "kworkercommoninit" {
  name = "${local.env}-kworkercentos${count.index}.iso"
  #local_hostname = "kworkercentos${count.index}"
  count = "${local.kworker_count}"
  #user_data = "${data.template_file.worker_user_data.rendered}"
  user_data = templatefile("${path.module}/config/worker_cloud_init.cfg",{ hostname = "worker",inc = count.index})
  #user_data = "${element(data.template_file.worker_user_data.rendered,count.index)}"


}

output "test" {
value = join(" ","${libvirt_domain.kubecluster_kmaster[*].network_interface.0.addresses.0}")
#value = tostring("${libvirt_domain.kubecluster_kmaster[*].network_interface.0.addresses.0}")
}


resource "libvirt_domain" "kubecluster_kworker" {
  depends_on = [libvirt_domain.kubecluster_kmaster]
  name = "${local.env}-kubecluster_kworker${count.index}"
  disk {
       volume_id = "${element(libvirt_volume.kworkercentos.*.id, count.index)}"
  }
  count = "${local.kworker_count}"
  network_interface {
    network_name = "default"
    hostname = "${local.env}-kworker${count.index}.tanu.com"
    wait_for_lease = "true"
  }
  cloudinit = "${element(libvirt_cloudinit_disk.kworkercommoninit.*.id, count.index)}"

  connection {
      type     = "ssh"
      user     = "ansible"
      private_key = file("/root/.ssh/id_rsa")
      #host = aws_instance.web.public_ip
      host = self.network_interface.0.addresses.0
	}

provisioner "file" {
	source      = "scripts/bootstrap.sh"
	destination = "/tmp/bootstrap.sh"
}

provisioner "file" {
        source      = "scripts/bootstrap_sworker.sh"
        destination = "/tmp/bootstrap_sworker.sh"
}

provisioner "remote-exec" {
	inline = [	
	"chmod +x /tmp/bootstrap.sh",
	"chmod +x /tmp/bootstrap_sworker.sh",
	#"sudo /tmp/bootstrap.sh",
	"sudo /tmp/bootstrap_sworker.sh ${join(" ",libvirt_domain.kubecluster_kmaster[*].network_interface.0.addresses.0)}"
	#"sudo /tmp/bootstrap_sworker.sh ${libvirt_domain.kubecluster_kmaster[0].network_interface.0.addresses.0}"
	]
}


}

/*
output "kworker" {
value = "${libvirt_domain.kubecluster_kworker[*].network_interface.0.addresses.0}"
}

*/

output "kworker" {
value  = tomap({
#for key,ip in libvirt_domain.kubecluster_kworker : libvirt_domain.kubecluster_kworker[key].name => ip.network_interface.0.addresses.0
for key,ip in libvirt_domain.kubecluster_kworker : ip.network_interface.0.hostname => ip.network_interface.0.addresses.0
})
}

/*
output "test" {
value = join(" ","${libvirt_domain.kubecluster_kmaster[*].network_interface.0.addresses.0}")
#value = tostring("${libvirt_domain.kubecluster_kmaster[*].network_interface.0.addresses.0}")
}
*/

#resource "custom_resource" "kmaster_ips" {
#program_create = join(" ","${libvirt_domain.kubecluster_kmaster[*].network_interface.0.addresses.0}")

#}


resource "libvirt_volume" "kmastercentos" {
  name = "kmastercentos${count.index}"
  base_volume_id = "${libvirt_volume.centos7.id}"
  count = "${local.kmaster_count}"
}

resource "libvirt_cloudinit_disk" "kmastercommoninit" {
  name = "kmastercentos${count.index}.iso"
  count = "${local.kmaster_count}" 
  #user_data = "${data.template_file.master_user_data.rendered}"
  user_data = templatefile("${path.module}/config/master_cloud_init.cfg",{ hostname = "kmaster${count.index}.tanu.com" })
}

resource "libvirt_domain" "kubecluster_kmaster" {
  name = "${local.env}-kubecluster_kmaster${count.index}"
  disk {
       volume_id = "${element(libvirt_volume.kmastercentos.*.id, count.index)}"
  }
  count = "${local.kmaster_count}"
  network_interface {
    network_name = "default"
    hostname = "${local.env}-kmaster${count.index}.tanu.com"
    wait_for_lease = "true"
  }
  cloudinit = "${element(libvirt_cloudinit_disk.kmastercommoninit.*.id, count.index)}"

  connection {
      type     = "ssh"
      user     = "ansible"
      private_key = file("/root/.ssh/id_rsa")
      #host = aws_instance.web.public_ip
      host = self.network_interface.0.addresses.0
        }

provisioner "file" {
        source      = "scripts/bootstrap.sh"
        destination = "/tmp/bootstrap.sh"
}

provisioner "file" {
        source      = "scripts/bootstrap_smaster.sh"
        destination = "/tmp/bootstrap_smaster.sh"
}

provisioner "remote-exec" {
        inline = [
        "chmod +x /tmp/bootstrap.sh",
        "chmod +x /tmp/bootstrap_smaster.sh",
        #"sudo /tmp/bootstrap.sh",
        #"sudo /tmp/bootstrap_smaster.sh"
        ]
}



}
/*
output "kmaster" {
value = "${libvirt_domain.kubecluster_kmaster[*].network_interface.0.addresses.0}"
}
*/

output "kmaster" {
value  = tomap({
for key,ip in libvirt_domain.kubecluster_kmaster : ip.network_interface.0.hostname => ip.network_interface.0.addresses.0
})
}

data "terraform_remote_state" "testdata" {
  backend = "local"
  config = {
    path = "${path.module}/terraform.tfstate.d/dev/terraform.tfstate"
  }
}
